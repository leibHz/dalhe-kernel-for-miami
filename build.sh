#!/bin/bash

# --- CONFIGURA√á√ÉO ---
# Defina o caminho para a pasta principal do seu Clang.
# O script vai encontrar os bin√°rios dentro dela automaticamente.
LLVM_DIR="$HOME/DalheKernel/ClangDA"

# --- IN√çCIO DO SCRIPT ---
# Pede um nome para o Kernel
read -p "Digite um nome para o kernel: " KERNEL_NAME
if [ -z "$KERNEL_NAME" ]; then
    echo "‚ùå Nome do kernel n√£o pode ser vazio. Saindo."
    exit 1
fi

# Checa se a pasta do Clang existe
if [ ! -d "$LLVM_DIR" ]; then
    echo "‚ùå A pasta do Clang n√£o foi encontrada em: $LLVM_DIR"
    echo "‚ùå Verifique a vari√°vel LLVM_DIR no in√≠cio do script."
    exit 1
fi

echo "‚úÖ Usando Clang de: $LLVM_DIR"
echo "‚úÖ Limpando compila√ß√µes antigas..."

# Limpa a compila√ß√£o antiga (mrproper)
make O=out ARCH=arm64 mrproper

# Configura o kernel com os defconfigs
echo "‚úÖ Configurando o kernel..."
make O=out ARCH=arm64 vendor/holi-qgki_defconfig vendor/debugfs.config vendor/ext_config/lineage_moto-holi.config

# Inicia o cron√¥metro
DATE_START=$(date +"%s")

echo "üöÄ Iniciando a compila√ß√£o do Kernel e DTBs..."

# Comando de compila√ß√£o principal.
# Passamos o caminho completo para cada ferramenta para evitar erros de ambiente.
make -j$(nproc --all) \
    O=out \
    ARCH=arm64 \
    CC="$LLVM_DIR/bin/clang" \
    LD="$LLVM_DIR/bin/ld.lld" \
    AR="$LLVM_DIR/bin/llvm-ar" \
    NM="$LLVM_DIR/bin/llvm-nm" \
    OBJCOPY="$LLVM_DIR/bin/llvm-objcopy" \
    OBJDUMP="$LLVM_DIR/bin/llvm-objdump" \
    STRIP="$LLVM_DIR/bin/llvm-strip" \
    HOSTCC="$LLVM_DIR/bin/clang" \
    HOSTLD="$LLVM_DIR/bin/ld.lld" \
    CROSS_COMPILE="aarch64-linux-gnu-" \
    LLVM=1 \
    LLVM_IAS=1 Image.gz dtbs

# --- EMPACOTAMENTO E VERIFICA√á√ÉO ---

# Define os caminhos dos artefatos de sa√≠da
IMAGE="out/arch/arm64/boot/Image.gz"
DTB_DIR="out/arch/arm64/boot/dts/vendor"

# VERIFICA SE A COMPILA√á√ÉO DEU CERTO ANTES DE CONTINUAR
if [ ! -f "$IMAGE" ]; then
    echo "‚ùå ERRO: A compila√ß√£o falhou! O arquivo Image.gz n√£o foi criado."
    exit 1
fi

echo "‚úÖ Compila√ß√£o conclu√≠da com sucesso!"
echo "üì¶ Empacotando para o AnyKernel3..."

# Copia a Imagem e combina os DTBs
cp $IMAGE AnyKernel3/Image.gz
cat ${DTB_DIR}/*.dtb > AnyKernel3/dtb

# Cria o zip do AnyKernel3
cd AnyKernel3
rm -f *.zip
zip -r9 "${KERNEL_NAME}.zip" .
cd ..

# Finaliza o cron√¥metro e mostra o tempo
DATE_END=$(date +"%s")
DIFF=$(($DATE_END - $DATE_START))

echo "---------------------------------------------------"
echo "üéâ Tudo pronto! O seu kernel √©: AnyKernel3/${KERNEL_NAME}.zip"
echo "‚è∞ Tempo total de compila√ß√£o: $(($DIFF / 60)) minuto(s) e $(($DIFF % 60)) segundos."
echo "---------------------------------------------------"
#!/bin/bash

# --- CONFIGURA√á√ÉO ---
# Defina o caminho para a pasta principal do seu Clang.
LLVM_DIR="$HOME/DalheKernel/ClangDA"
# Defina a pasta onde os arquivos finais ser√£o salvos.
OUTPUT_DIR="Releases"

# --- IN√çCIO DO SCRIPT ---

# Menu de sele√ß√£o para o tipo de compila√ß√£o
echo "Escolha o tipo de pacote de sa√≠da:"
echo "  1) AnyKernel3 (.zip para Recovery)"
echo "  2) Fastboot (boot.img para flashear via Fastboot)"
read -p "Digite 1 ou 2: " BUILD_CHOICE

# Define o alvo da compila√ß√£o com base na escolha
case $BUILD_CHOICE in
    1)
        BUILD_TARGET="Image.gz dtbs"
        PACKAGE_TYPE="AnyKernel3"
        ;;
    2)
        BUILD_TARGET="bootimg"
        PACKAGE_TYPE="Fastboot"
        ;;
    *)
        echo "‚ùå Op√ß√£o inv√°lida. Saindo."
        exit 1
        ;;
esac

echo "‚úÖ Tipo de pacote selecionado: $PACKAGE_TYPE"

# Pede um nome para o Kernel
read -p "Digite um nome para o arquivo do kernel (ex: PowerKernel-v1): " KERNEL_NAME
if [ -z "$KERNEL_NAME" ]; then
    echo "‚ùå Nome do kernel n√£o pode ser vazio. Saindo."
    exit 1
fi

# Checa se a pasta do Clang existe
if [ ! -d "$LLVM_DIR" ]; then
    echo "‚ùå A pasta do Clang n√£o foi encontrada em: $LLVM_DIR"
    echo "‚ùå Verifique a vari√°vel LLVM_DIR no in√≠cio do script."
    exit 1
fi

echo "‚úÖ Usando Clang de: $LLVM_DIR"
echo "‚úÖ Limpando compila√ß√µes antigas..."

# Limpa a compila√ß√£o antiga (mrproper)
make O=out ARCH=arm64 mrproper

# Configura o kernel com os defconfigs
echo "‚úÖ Configurando o kernel..."
make O=out ARCH=arm64 vendor/holi-qgki_defconfig vendor/debugfs.config vendor/ext_config/lineage_moto-holi.config

# Inicia o cron√¥metro
DATE_START=$(date +"%s")

echo "üöÄ Iniciando a compila√ß√£o para $PACKAGE_TYPE..."

# Comando de compila√ß√£o principal.
make -j$(nproc --all) \
    O=out \
    ARCH=arm64 \
    CC="$LLVM_DIR/bin/clang" \
    LD="$LLVM_DIR/bin/ld.lld" \
    AR="$LLVM_DIR/bin/llvm-ar" \
    NM="$LLVM_DIR/bin/llvm-nm" \
    OBJCOPY="$LLVM_DIR/bin/llvm-objcopy" \
    OBJDUMP="$LLVM_DIR/bin/llvm-objdump" \
    STRIP="$LLVM_DIR/bin/llvm-strip" \
    HOSTCC="$LLVM_DIR/bin/clang" \
    HOSTLD="$LLVM_DIR/bin/ld.lld" \
    CROSS_COMPILE="aarch64-linux-gnu-" \
    LLVM=1 \
    LLVM_IAS=1 $BUILD_TARGET

# --- EMPACOTAMENTO E VERIFICA√á√ÉO ---

# Cria o diret√≥rio de sa√≠da se ele n√£o existir
mkdir -p $OUTPUT_DIR

# Empacota com base na escolha do usu√°rio
if [ "$PACKAGE_TYPE" == "AnyKernel3" ]; then
    # Verifica se a compila√ß√£o do AnyKernel deu certo
    IMAGE="out/arch/arm64/boot/Image.gz"
    if [ ! -f "$IMAGE" ]; then
        echo "‚ùå ERRO: A compila√ß√£o falhou! O arquivo Image.gz n√£o foi criado."
        exit 1
    fi
    echo "‚úÖ Compila√ß√£o conclu√≠da com sucesso!"
    echo "üì¶ Empacotando para AnyKernel3..."

    DTB_DIR="out/arch/arm64/boot/dts/vendor"
    cp $IMAGE AnyKernel3/Image.gz
    cat ${DTB_DIR}/*.dtb > AnyKernel3/dtb

    # Cria o zip do AnyKernel3
    cd AnyKernel3
    rm -f *.zip
    zip -r9 "${KERNEL_NAME}.zip" .
    # Move o zip para a pasta de sa√≠da
    mv "${KERNEL_NAME}.zip" ../$OUTPUT_DIR/
    cd ..
    FINAL_FILE="${OUTPUT_DIR}/${KERNEL_NAME}.zip"

elif [ "$PACKAGE_TYPE" == "Fastboot" ]; then
    # Verifica se a compila√ß√£o do boot.img deu certo
    BOOT_IMG="out/arch/arm64/boot/boot.img"
    if [ ! -f "$BOOT_IMG" ]; then
        echo "‚ùå ERRO: A compila√ß√£o falhou! O arquivo boot.img n√£o foi criado."
        exit 1
    fi
    echo "‚úÖ Compila√ß√£o conclu√≠da com sucesso!"
    echo "üì¶ Movendo boot.img..."
    # Move o boot.img para a pasta de sa√≠da, renomeando-o
    mv $BOOT_IMG "${OUTPUT_DIR}/${KERNEL_NAME}-boot.img"
    FINAL_FILE="${OUTPUT_DIR}/${KERNEL_NAME}-boot.img"
fi

# Finaliza o cron√¥metro e mostra o tempo
DATE_END=$(date +"%s")
DIFF=$(($DATE_END - $DATE_START))

echo "---------------------------------------------------"
echo "üéâ Tudo pronto! O seu kernel est√° em: ${FINAL_FILE}"
echo "‚è∞ Tempo total de compila√ß√£o: $(($DIFF / 60)) minuto(s) e $(($DIFF % 60)) segundos."
echo "---------------------------------------------------"
